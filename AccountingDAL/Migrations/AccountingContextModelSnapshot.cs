// <auto-generated />
using System;
using AccountingDAL.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AccountingDAL.Migrations
{
    [DbContext(typeof(AccountingContext))]
    partial class AccountingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AccountingDAL.Model.Balance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<float>("Sum")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AccountID");

                    b.ToTable("Balances");
                });

            modelBuilder.Entity("AccountingDAL.Model.Dictionaries.AccountBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Removed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RemovedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AccountBase");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AccountBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AccountingDAL.Model.Dictionaries.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Removed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RemovedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("AccountingDAL.Model.Dictionaries.Contractor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OperationType")
                        .HasColumnType("int");

                    b.Property<bool>("Removed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RemovedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryID");

                    b.ToTable("Contractors");
                });

            modelBuilder.Entity("AccountingDAL.Model.Operations.CashOperation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<int>("OperationType")
                        .HasColumnType("int");

                    b.Property<float>("Sum")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AccountID");

                    b.ToTable("CashOperations");
                });

            modelBuilder.Entity("AccountingDAL.Model.Operations.ContractorOperation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContractorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<int>("OperationType")
                        .HasColumnType("int");

                    b.Property<float>("Sum")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AccountID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("ContractorID");

                    b.ToTable("ContractorOperations");
                });

            modelBuilder.Entity("AccountingDAL.Model.Operations.CorrectionOperation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<int>("OperationType")
                        .HasColumnType("int");

                    b.Property<float>("Sum")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AccountID");

                    b.ToTable("CorrectionOperations");
                });

            modelBuilder.Entity("AccountingDAL.Model.Operations.TransferOperation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreditCardID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreditDepositAccountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DebitCardID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DebitDepositAccountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<float>("Sum")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CreditCardID");

                    b.HasIndex("CreditDepositAccountID");

                    b.HasIndex("DebitCardID");

                    b.HasIndex("DebitDepositAccountID");

                    b.ToTable("TransferOperations");
                });

            modelBuilder.Entity("AccountingDAL.Model.Plans.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("AccountingDAL.Model.Plans.PlanSaving", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PlanID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Sum")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AccountID");

                    b.HasIndex("PlanID");

                    b.ToTable("PlanSavings");
                });

            modelBuilder.Entity("AccountingDAL.Model.Plans.PlanSpending", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PlanID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Sum")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CategoryID");

                    b.HasIndex("PlanID");

                    b.ToTable("PlanSpendings");
                });

            modelBuilder.Entity("AccountingDAL.Model.Dictionaries.Card", b =>
                {
                    b.HasBaseType("AccountingDAL.Model.Dictionaries.AccountBase");

                    b.HasDiscriminator().HasValue("Card");
                });

            modelBuilder.Entity("AccountingDAL.Model.Dictionaries.DepositAccount", b =>
                {
                    b.HasBaseType("AccountingDAL.Model.Dictionaries.AccountBase");

                    b.Property<Guid?>("CategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("CategoryID");

                    b.HasDiscriminator().HasValue("DepositAccount");
                });

            modelBuilder.Entity("AccountingDAL.Model.Balance", b =>
                {
                    b.HasOne("AccountingDAL.Model.Dictionaries.AccountBase", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("AccountingDAL.Model.Dictionaries.Contractor", b =>
                {
                    b.HasOne("AccountingDAL.Model.Dictionaries.Category", "Category")
                        .WithMany("Contractors")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("AccountingDAL.Model.Operations.CashOperation", b =>
                {
                    b.HasOne("AccountingDAL.Model.Dictionaries.AccountBase", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("AccountingDAL.Model.Operations.ContractorOperation", b =>
                {
                    b.HasOne("AccountingDAL.Model.Dictionaries.AccountBase", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountingDAL.Model.Dictionaries.Category", "Category")
                        .WithMany("Operations")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AccountingDAL.Model.Dictionaries.Contractor", "Contractor")
                        .WithMany()
                        .HasForeignKey("ContractorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Category");

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("AccountingDAL.Model.Operations.CorrectionOperation", b =>
                {
                    b.HasOne("AccountingDAL.Model.Dictionaries.AccountBase", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("AccountingDAL.Model.Operations.TransferOperation", b =>
                {
                    b.HasOne("AccountingDAL.Model.Dictionaries.Card", "CreditCard")
                        .WithMany("CreditTransfers")
                        .HasForeignKey("CreditCardID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AccountingDAL.Model.Dictionaries.DepositAccount", "CreditDepositAccount")
                        .WithMany("CreditTransfers")
                        .HasForeignKey("CreditDepositAccountID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AccountingDAL.Model.Dictionaries.Card", "DebitCard")
                        .WithMany("DeditTransfers")
                        .HasForeignKey("DebitCardID");

                    b.HasOne("AccountingDAL.Model.Dictionaries.DepositAccount", "DebitDepositAccount")
                        .WithMany("DeditTransfers")
                        .HasForeignKey("DebitDepositAccountID");

                    b.Navigation("CreditCard");

                    b.Navigation("CreditDepositAccount");

                    b.Navigation("DebitCard");

                    b.Navigation("DebitDepositAccount");
                });

            modelBuilder.Entity("AccountingDAL.Model.Plans.PlanSaving", b =>
                {
                    b.HasOne("AccountingDAL.Model.Dictionaries.AccountBase", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountingDAL.Model.Plans.Plan", "Plan")
                        .WithMany("Savings")
                        .HasForeignKey("PlanID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("AccountingDAL.Model.Plans.PlanSpending", b =>
                {
                    b.HasOne("AccountingDAL.Model.Dictionaries.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountingDAL.Model.Plans.Plan", "Plan")
                        .WithMany("Spendings")
                        .HasForeignKey("PlanID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("AccountingDAL.Model.Dictionaries.DepositAccount", b =>
                {
                    b.HasOne("AccountingDAL.Model.Dictionaries.Category", "Category")
                        .WithMany("DepositAccounts")
                        .HasForeignKey("CategoryID");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("AccountingDAL.Model.Dictionaries.Category", b =>
                {
                    b.Navigation("Contractors");

                    b.Navigation("DepositAccounts");

                    b.Navigation("Operations");
                });

            modelBuilder.Entity("AccountingDAL.Model.Plans.Plan", b =>
                {
                    b.Navigation("Savings");

                    b.Navigation("Spendings");
                });

            modelBuilder.Entity("AccountingDAL.Model.Dictionaries.Card", b =>
                {
                    b.Navigation("CreditTransfers");

                    b.Navigation("DeditTransfers");
                });

            modelBuilder.Entity("AccountingDAL.Model.Dictionaries.DepositAccount", b =>
                {
                    b.Navigation("CreditTransfers");

                    b.Navigation("DeditTransfers");
                });
#pragma warning restore 612, 618
        }
    }
}
